@{
    ViewBag.Title = "Index";
}

@section css {
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.5/leaflet.css" />
     <!--[if lte IE 8]>
         <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.5/leaflet.ie.css" />
     <![endif]-->
    
    <style>
        #map {
            height: 560px;
        }
    </style>
}

@section scripts {
    <script src="http://cdn.leafletjs.com/leaflet-0.5/leaflet.js"></script>
    <script>
        // create a map in the "map" div, set the view to a given place and zoom
        var map = L.map('map').setView([53.4791, -2.2457], 13);

        // add an OpenStreetMap tile layer
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        function onEachFeature(feature, layer) {
            // does this feature have a property named popupContent?
            if (feature.properties && feature.properties.name) {
                layer.bindPopup(feature.properties.name);
            }
        }
        
        function getRequestUrl(perPage, pageNumber) {
            var url = "http://api.citysdk.waag.org/admr.uk.gr.manchester/nodes?geom&osm::amenity=parking&per_page=" + perPage;
            if (pageNumber) {
                url += "&page=" + pageNumber;
            }

            return url;
        }
        
        function loadPageBlock(numberOfSitesPerPage, pageNumber) {
            pageNumber = pageNumber || 1;
            
            $.getJSON(getRequestUrl(numberOfSitesPerPage, pageNumber), function (response) {
                if (response && response.results) {
                    for (var i = response.results.length - 1; i >= 0; i--) {
                        var thisItem = response.results[i];

                        if (thisItem.name) {

                            var geojsonFeature = {
                                "type": "Feature",
                                "properties": {
                                    "name": thisItem.name,
                                    "cdk_id": thisItem.cdk_id,
                                    "layer_id": thisItem.layer_id
                                },
                                "geometry": {
                                    "type": thisItem.geom.type,
                                    "coordinates": thisItem.geom.coordinates
                                }
                            };

                            L.geoJson(geojsonFeature, {
                                onEachFeature: onEachFeature
                            }).addTo(map);
                        }
                    }

                    var nextPage = response.next_page;
                    if (nextPage > 0) {
                        loadPageBlock(numberOfSitesPerPage, nextPage);
                    }
                }
            });
        }

        // Load all of the routes
        var numberOfSitesPerPage = 500;

        loadPageBlock(numberOfSitesPerPage);

    // add a marker in the given location, attach some popup content to it and open the popup
        //L.marker([51.5, -0.09]).addTo(map)
        //    .bindPopup('A pretty CSS3 popup. <br> Easily customizable.')
        //    .openPopup();

        var locator = function() {
            
            // HTML5 geolocation
            // Check to see if this browser supports geolocation.
            if (navigator.geolocation) {

                // This is the location marker that we will be using
                // on the map. Let's store a reference to it here so
                // that it can be updated in several places.
                var locationMarker = null;


                // Get the location of the user's browser using the
                // native geolocation service. When we invoke this method
                // only the first callback is requied. The second
                // callback - the error handler - and the third
                // argument - our configuration options - are optional.
                navigator.geolocation.getCurrentPosition(
                    function(position) {

                        // Check to see if there is already a location.
                        // There is a bug in FireFox where this gets
                        // invoked more than once with a cahced result.
                        if (locationMarker) {
                            return;
                        }

                        // Log that this is the initial position.
                        console.log("Initial Position Found");

                        // Add a marker to the map using the position.
                        locationMarker = L.marker([
                            position.coords.latitude,
                            position.coords.longitude]).addTo(map);

                    },
                    function(error) {
                        console.log("Something went wrong: ", error);
                    },
                    {
                        timeout: (5 * 1000),
                        maximumAge: (1000 * 60 * 15),
                        enableHighAccuracy: true
                    }
                );
            }
        };

        locator();
    </script>
}

<h1>API Tests</h1>

<div id="map"></div>